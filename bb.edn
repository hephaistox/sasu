{:paths ["src/cljc"],
 :tasks
   {-env-dev {:depends [repl-clj repl-cljs]},
    :init (def dir "target/production"),
    build-uberjar {:depends [clean],
                   :doc "Build an uberjar",
                   :task (do (println "Build production uberjar")
                             (shell "npx shadow-cljs release app")
                             (shell "clj -T:uberjar")
                             (shell "git init -b master" {:dir dir})
                             (shell (str "git remote add clever "
                                         (System/getenv
                                           "SASU_CAUMOND_PROD_REPO"))
                                    {:dir dir})
                             (shell "git add ." {:dir dir})
                             (shell "git commit -m \"auto\"" {:dir dir}))},
    clean {:doc "Remove temporary build files",
           :task (do (println "Temporary build files in progress")
                     (shell "rm -fr target")
                     (shell "rm -f .DS_Store")
                     (shell "rm -fr resources/public/js/compiled"))},
    deploy {:depends [build-uberjar],
            :doc "Build and deploy",
            :task (shell "git push --force -u clever master" {:dir dir})},
    deps {:doc "Update deps",
          :task (do (shell "clj -M:antq") (shell "npm upgrade"))},
    doctor
      {:doc "Doctor checks the project pre requisites",
       :requires ([babashka.http-client :as http]
                  [clojure.string :as str]
                  [kotws.links :as klinks]),
       :task
         (do
           (println "Testing:")
           (let [r (->> klinks/all-links
                        (pmap
                          (fn [{:keys [absolute-url name], :as tested-url}]
                            (let [s (pr-str name)]
                              (try (let [content (http/get absolute-url)
                                         valid? (contains? #{301 200}
                                                           (:status content))]
                                     (if valid?
                                       (print (str s ", "))
                                       (print (str
                                                "\u001b[41m"
                                                s
                                                "\u001b[0m"
                                                ", found= "
                                                (subs (:status content) 1 10))))
                                     (merge tested-url
                                            (dissoc content :uri)
                                            {:valid? valid?}))
                                   (catch Exception e
                                     (println (str "\u001b[41m" s "\u001b[0m")
                                              " -> exception")
                                     (assoc tested-url
                                       :exception e
                                       :url absolute-url))))))
                        vec)]
             (println)
             (println
               "********************************************************************************")
             (println "As a synthesis, failed to load :")
             (doseq [link r]
               (when-not (:valid? link)
                 (println "* "
                          (:absolute-url link)
                          ", found "
                          (:status link)
                          (keys link))))
             (if (nil? (System/getenv "SASU_CAUMOND_PROD_REPO"))
               (println
                 "Setup this environment variable SASU_CAUMOND_PROD_REPO to be able to push to production")
               (println "Ready to push to production"))))},
    env-dev {:depends [clean],
             :doc "Prepare dev environment (both repls and css).",
             :task (run '-env-dev {:parallel true})},
    env-prod
      {:depends [clean],
       :doc "Compile frontend and backend in production mode and start it",
       :task (do (shell "npx shadow-cljs release app") (shell "clj -X:prod"))},
    repl-clj {:doc "Start REPL", :task (shell "clj -X:repl")},
    repl-cljs {:doc "Starts cljs REPL",
               :task (shell "npx shadow-cljs watch app")}}}
